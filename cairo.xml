<crate name='cairo'>
  <library name='cairo'/>

  <struct name='Cairo' opaque='true'/>

  <enum name='Status'>
    <value name='Success'/>
    <value name='NoMemory'/>
    <value name='InvalidRestore'/>
    <value name='InvalidPopGroup'/>
    <value name='NoCurrentPoint'/>
    <value name='InvalidMatrix'/>
    <value name='InvalidStatus'/>
    <value name='NullPointer'/>
    <value name='InvalidString'/>
    <value name='InvalidPathData'/>
    <value name='ReadError'/>
    <value name='WriteError'/>
    <value name='SurfaceFinished'/>
    <value name='TypeMismatch'/>
    <value name='SurfaceTypeMismatch'/>
    <value name='PatternTypeMismatch'/>
    <value name='InvalidContent'/>
    <value name='InvalidFormat'/>
    <value name='InvalidVisual'/>
    <value name='FileNotFound'/>
    <value name='InvalidDash'/>
    <value name='InvalidDSCComment'/>
    <value name='InvalidIndex'/>
    <value name='ClipNotRepresentable'/>
    <value name='TempFileError'/>
    <value name='InvalidStride'/>
    <value name='FontTypeMismatch'/>
    <value name='UserFontImmutable'/>
    <value name='UserFontError'/>
    <value name='NegativeCount'/>
    <value name='InvalidClusters'/>
    <value name='InvalidSlant'/>
    <value name='InvalidWeight'/>
    <value name='InvalidSize'/>
    <value name='UserFontNotImplemented'/>
    <value name='DeviceTypeMismatch'/>
    <value name='DeviceError'/>
    <value name='InvalidMeshConstruction'/>
    <value name='DeviceFinished'/>
  </enum>

  <module name='antialias'>
    <enum name='Antialias'>
      <value name='Default'/>
      <value name='None'/>
      <value name='Gray'/>
      <value name='Subpixel'/>
      <value name='Fast'/>
      <value name='Good'/>
      <value name='Best'/>
    </enum>
  </module>
  
  <module name='fill_rule'>
    <enum name='FillRule'>
      <value name='Winding'/>
      <value name='EvenOdd'/>
    </enum>
  </module>

  <module name='line_cap'>
    <enum name='LineCap'>
      <value name='Butt'/>
      <value name='Round'/>
      <value name='Square'/>
    </enum>
  </module>

  <module name='line_join'>
    <enum name='LineJoin'>
      <value name='Miter'/>
      <value name='Round'/>
      <value name='Bevel'/>
    </enum>
  </module>

  <implementation for='Cairo' prefix='cairo_'>
    <method name='new' foreign='cairo_create'>
      <argument name='surface' type='{surface::Surface}' pass_by='mut-ref' transformer='opaque'/>
      <result type='{Cairo}'/>
    </method>

    <method name='status'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[Status]'/>
    </method>

    <method name='save'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='restore'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='get_target'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='{surface::Surface}' transformer='clone'/>
    </method>

    <method name='push_group'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='push_group_with_content'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='content' type='[surface::content::Content]'/>
    </method>

    <method name='pop_group'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='{pattern::Pattern}'/>
    </method>

    <method name='pop_group_to_source'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='get_group_target'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='{surface::Surface}' transformer='clone'/>
    </method>

    <method name='set_source_rgb'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='red' type='double'/>
      <argument name='green' type='double'/>
      <argument name='blue' type='double'/>
    </method>

    <method name='set_source_rgba'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='red' type='double'/>
      <argument name='green' type='double'/>
      <argument name='blue' type='double'/>
      <argument name='alpha' type='double'/>
    </method>

    <method name='set_source'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='source' type='{pattern::Pattern}' pass_by='mut-ref' transformer='opaque'/>
    </method>

    <method name='set_source_surface'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='surface' type='{surface::Surface}' pass_by='mut-ref' transformer='opaque'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
    </method>

    <method name='get_source'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='{pattern::Pattern}'/>
    </method>

    <method name='set_antialias'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='antialias' type='[antialias::Antialias]'/>
    </method>

    <method name='get_antialias'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[antialias::Antialias]'/>
    </method>

    <method name='set_dash'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='dashes' type='vec double' pass_by='ref' transformer='vec'/>
      <argument name='dashes' type='int' transformer='vec-length'/>
      <argument name='offset' type='double'/>
    </method>

    <method name='get_dash_count' foreign='cairo_get_dash_count'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='int'/>
    </method>

    <method name='get_dash'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='dashes' type='vec double' pass_by='mut-ref' transformer='vec-zero' value='self.get_dash_count()'/>
      <argument name='offset' type='double' pass_by='mut-ref' transformer='zero'/>
      <result name='dashes' type='vec double' pass_by='owned' transformer='out'/>
      <result name='offset' type='double' transformer='out'/>
    </method>

    <method name='set_fill_rule'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='fill_rule' type='[fill_rule::FillRule]'/>
    </method>

    <method name='get_fill_rule'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[fill_rule::FillRule]'/>
    </method>

    <method name='set_line_cap'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='line_cap' type='[line_cap::LineCap]'/>
    </method>

    <method name='get_line_cap'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[line_cap::LineCap]'/>
    </method>

    <method name='set_line_join'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='line_join' type='[line_join::LineJoin]'/>
    </method>

    <method name='get_line_join'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[line_join::LineJoin]'/>
    </method>

    <method name='set_line_width'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='width' type='double'/>
    </method>

    <method name='get_line_width'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='double'/>
    </method>

    <method name='set_miter_limit'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='limit' type='double'/>
    </method>

    <method name='get_miter_limit'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='double'/>
    </method>

    <method name='set_operator'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='operator' type='[operator::Operator]'/>
    </method>

    <method name='get_operator'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[operator::Operator]'/>
    </method>

    <method name='set_tolerance'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='tolerance' type='double'/>
    </method>

    <method name='get_tolerance'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='double'/>
    </method>

    <method name='clip'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='clip_preserve'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='clip_extents'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='x2' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y2' type='double' pass_by='mut-ref' transformer='zero'/>
      <result name='x1' type='double' transformer='out'/>
      <result name='y1' type='double' transformer='out'/>
      <result name='x2' type='double' transformer='out'/>
      <result name='y2' type='double' transformer='out'/>
    </method>

    <method name='in_clip'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
      <result type='i32' transformer='compare' value='0'/>
    </method>

    <method name='reset_clip'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='fill'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='fill_preserve'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='fill_extents'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='x2' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y2' type='double' pass_by='mut-ref' transformer='zero'/>
      <result name='x1' type='double' transformer='out'/>
      <result name='y1' type='double' transformer='out'/>
      <result name='x2' type='double' transformer='out'/>
      <result name='y2' type='double' transformer='out'/>
    </method>

    <method name='in_fill'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
      <result type='i32' transformer='compare' value='0'/>
    </method>

    <method name='mask'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='pattern' type='{pattern::Pattern}' pass_by='mut-ref' transformer='opaque'/>
    </method>

    <method name='mask_surface'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='surface' type='{surface::Surface}' pass_by='mut-ref' transformer='opaque'/>
      <argument name='surface_x' type='double'/>
      <argument name='surface_y' type='double'/>
    </method>

    <method name='paint'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='paint_with_alpha'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='alpha' type='double'/>
    </method>

    <method name='stroke'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='stroke_preserve'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='stroke_extents'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='x2' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y2' type='double' pass_by='mut-ref' transformer='zero'/>
      <result name='x1' type='double' transformer='out'/>
      <result name='y1' type='double' transformer='out'/>
      <result name='x2' type='double' transformer='out'/>
      <result name='y2' type='double' transformer='out'/>
    </method>

    <method name='in_stroke'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
      <result type='i32' transformer='compare' value='0'/>
    </method>

    <method name='copy_page'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='show_page'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='get_reference_count'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='unsigned int'/>
    </method>

    <!-- TODO: cairo_set_user_data -->
    <!-- TODO: cairo_get_user_data -->

    <!-- Paths -->

    <method name='copy_path'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='{path::Path}'/>
    </method>

    <method name='copy_path_flat'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='{path::Path}'/>
    </method>

    <method name='append_path'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='path' type='{path::Path}' pass_by='ref' transformer='opaque'/>
    </method>

    <method name='has_current_point'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='i32' transformer='compare' value='0'/>
    </method>

    <method name='get_current_point'>
      <argument type='{Surface}' pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y' type='double' pass_by='mut-ref' transformer='zero'/>
      <result name='x' type='double' transformer='out'/>
      <result name='y' type='double' transformer='out'/>
    </method>

    <method name='new_path'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='new_sub_path'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='close_path'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='arc'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='xc' type='double'/>
      <argument name='yc' type='double'/>
      <argument name='radius' type='double'/>
      <argument name='angle1' type='double'/>
      <argument name='angle2' type='double'/>
    </method>

    <method name='arc_negative'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='xc' type='double'/>
      <argument name='yc' type='double'/>
      <argument name='radius' type='double'/>
      <argument name='angle1' type='double'/>
      <argument name='angle2' type='double'/>
    </method>

    <method name='curve_to'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x1' type='double'/>
      <argument name='y1' type='double'/>
      <argument name='x2' type='double'/>
      <argument name='y2' type='double'/>
      <argument name='x3' type='double'/>
      <argument name='y3' type='double'/>
    </method>

    <method name='line_to'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
    </method>

    <method name='move_to'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
    </method>

    <method name='rectangle'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
      <argument name='width' type='double'/>
      <argument name='height' type='double'/>
    </method>

    <method name='glyph_path'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='glyphs' type='vec {font::Glyph}' pass_by='ref' transformer='vec'/>
      <argument name='glyphs' type='int' transformer='vec-length'/>
    </method>

    <method name='text_path'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='text_path' type='string' pass_by='ref' transformer='cstring'/>
    </method>

    <method name='rel_curve_to'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='dx1' type='double'/>
      <argument name='dy1' type='double'/>
      <argument name='dx2' type='double'/>
      <argument name='dy2' type='double'/>
      <argument name='dx3' type='double'/>
      <argument name='dy3' type='double'/>
    </method>

    <method name='rel_line_to'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='dx' type='double'/>
      <argument name='dy' type='double'/>
    </method>

    <method name='rel_move_to'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='dx' type='double'/>
      <argument name='dy' type='double'/>
    </method>

    <method name='path_extents'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='x2' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y2' type='double' pass_by='mut-ref' transformer='zero'/>
      <result name='x1' type='double' transformer='out'/>
      <result name='y1' type='double' transformer='out'/>
      <result name='x2' type='double' transformer='out'/>
      <result name='y2' type='double' transformer='out'/>
    </method>

    <!-- Transformations -->

    <method name='translate'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='tx' type='double'/>
      <argument name='ty' type='double'/>
    </method>

    <method name='scale'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='sx' type='double'/>
      <argument name='sy' type='double'/>
    </method>

    <method name='rotate'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='angle' type='double'/>
    </method>

    <method name='transform'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='matrix' type='{matrix::Matrix}' pass_by='ref'/>
    </method>

    <method name='set_matrix'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='matrix' type='{matrix::Matrix}' pass_by='ref'/>
    </method>

    <method name='get_matrix'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='matrix' type='{matrix::Matrix}' pass_by='mut-ref' transformer='zero'/>
      <result name='matrix' type='{matrix::Matrix}' transformer='out'/>
    </method>

    <method name='identity_matrix'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>

    <method name='user_to_device'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double' transformer='to-mut-ref'/>
      <argument name='y' type='double' transformer='to-mut-ref'/>
      <result name='x' type='double' transformer='out'/>
      <result name='y' type='double' transformer='out'/>
    </method>

    <method name='user_to_device_distance'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='dx' type='double' transformer='to-mut-ref'/>
      <argument name='dy' type='double' transformer='to-mut-ref'/>
      <result name='dx' type='double' transformer='out'/>
      <result name='dy' type='double' transformer='out'/>
    </method>

    <method name='device_to_user'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double' transformer='to-mut-ref'/>
      <argument name='y' type='double' transformer='to-mut-ref'/>
      <result name='x' type='double' transformer='out'/>
      <result name='y' type='double' transformer='out'/>
    </method>

    <method name='device_to_user_distance'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='dx' type='double' transformer='to-mut-ref'/>
      <argument name='dy' type='double' transformer='to-mut-ref'/>
      <result name='dx' type='double' transformer='out'/>
      <result name='dy' type='double' transformer='out'/>
    </method>

    <!-- Text -->

    <method name='select_font_face'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='family' type='string' pass_by='ref' transformer='cstring'/>
      <argument name='slant' type='[font::slant::Slant]'/>
      <argument name='weight' type='[font::weight::Weight]'/>
    </method>

    <method name='set_font_size'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='size' type='double'/>
    </method>

    <method name='set_font_matrix'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='size' type='[matrix::Matrix]' pass_by='ref'/>
    </method>

    <method name='get_font_matrix'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='matrix' type='[matrix::Matrix]' pass_by='mut-ref' transformer='zero'/>
      <result name='matrix' type='[matrix::Matrix]' transformer='out'/>
    </method>

    <method name='set_font_options'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='options' type='[font::Options]'/>
    </method>

    <method name='get_font_options'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='options' type='[font::Options]'/>
    </method>

    <method name='set_font_face'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='font_face' type='[font::FontFace]'/>
    </method>

    <method name='get_font_face'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[font::FontFace]'/>
    </method>

    <method name='set_scaled_font'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='scaled_font' type='[font::ScaledFont]'/>
    </method>

    <method name='get_scaled_font'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[font::ScaledFont]'/>
    </method>

    <method name='show_text'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='utf8' type='string' pass_by='ref'/>
    </method>

    <method name='show_glyphs'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='glyphs' type='vec {font::Glyph}' pass_by='ref' transformer='vec'/>
      <argument name='glyphs' type='int' transformer='vec-length'/>
    </method>

    <method name='show_text_glyphs'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='utf8' type='string' pass_by='ref'/>
      <argument name='utf8_len' type='int' value='-1'/>
      <argument name='glyphs' type='vec {font::Glyph}' pass_by='ref' transformer='vec'/>
      <argument name='glyphs' type='int' transformer='vec-length'/>
      <argument name='clusters' type='vec {font::Cluster}' pass_by='ref' transformer='vec'/>
      <argument name='clusters' type='int' transformer='vec-length'/>
      <argument name='cluster_flags' type='[font::cluster_flags::ClusterFlags]'/>
    </method>

    <method name='font_extents'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='extents' type='[font::FontExtents]' pass_by='mut-ref' transformer='zero'/>
      <result name='extents' type='[font::FontExtents]' transformer='out'/>
    </method>

    <method name='text_extents'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='utf8' type='string' pass_by='ref'/>
      <argument name='extents' type='[font::TextExtents]' pass_by='mut-ref' transformer='zero'/>
      <result name='extents' type='[font::TextExtents]' transformer='out'/>
    </method>

    <method name='glyph_extents'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='glyphs' type='vec {font::Glyph}' pass_by='ref' transformer='vec'/>
      <argument name='glyphs' type='int' transformer='vec-length'/>
      <argument name='extents' type='[font::TextExtents]' pass_by='mut-ref' transformer='zero'/>
      <result name='extents' type='[font::TextExtents]' transformer='out'/>
    </method>
  </implementation>

  <implementation trait='std::clone::Clone' for='Cairo'>
    <method name='clone' foreign='cairo_reference'>
      <argument pass_by='self' transformer='opaque'/>
      <result type='{Cairo}'/>
    </method>
  </implementation>

  <implementation trait='std::ops::Drop' for='Cairo'>
    <method name='drop' foreign='cairo_destroy'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>
  </implementation>

  <module file='cairo/operator'/>

  <module file='cairo/path'/>
  <module file='cairo/pattern'/>
  <module file='cairo/region'/>
  <module file='cairo/font'/>

  <!-- Raster Sources -->

  <module file='cairo/surface'/>
  <module file='cairo/matrix'/>
</crate>
