<rsi name='cairo'>
  <dependency name='cairo' type='c'/>

  <type name='cairo:bool' in='c:int' out='rust:bool' template='compare'>
    <value name='compare_type' value='!='/>
    <value name='compare_with' value='0'/>
  </type>

  <enum name='Status'>
    <value name='Success'/>
    <value name='NoMemory'/>
    <value name='InvalidRestore'/>
    <value name='InvalidPopGroup'/>
    <value name='NoCurrentPoint'/>
    <value name='InvalidMatrix'/>
    <value name='InvalidStatus'/>
    <value name='NullPointer'/>
    <value name='InvalidString'/>
    <value name='InvalidPathData'/>
    <value name='ReadError'/>
    <value name='WriteError'/>
    <value name='SurfaceFinished'/>
    <value name='SurfaceTypeMismatch'/>
    <value name='PatternTypeMismatch'/>
    <value name='InvalidContent'/>
    <value name='InvalidFormat'/>
    <value name='InvalidVisual'/>
    <value name='FileNotFound'/>
    <value name='InvalidDash'/>
    <value name='InvalidDSCComment'/>
    <value name='InvalidIndex'/>
    <value name='ClipNotRepresentable'/>
    <value name='TempFileError'/>
    <value name='InvalidStride'/>
    <value name='FontTypeMismatch'/>
    <value name='UserFontImmutable'/>
    <value name='UserFontError'/>
    <value name='NegativeCount'/>
    <value name='InvalidClusters'/>
    <value name='InvalidSlant'/>
    <value name='InvalidWeight'/>
    <value name='InvalidSize'/>
    <value name='UserFontNotImplemented'/>
    <value name='DeviceTypeMismatch'/>
    <value name='DeviceError'/>
    <value name='InvalidMeshConstruction'/>
    <value name='DeviceFinished'/>
  </enum>

  <struct name='Cairo' opaque='true' prefix='cairo_'>
    <constructor name='create'>
      <arg name='surface' type='cairo::surface::Surface'/>
    </constructor>

    <method name='status'>
      <result type='cairo::Status'/>
    </method>

    <method name='save'/>
    <method name='restore'/>

    <method name='get_target'>
      <result type='cairo::surface::Surface' owned='false'/>
    </method>

    <method name='push_group'/>

    <method name='push_group_with_content'>
      <arg name='content' type='cairo::surface::Content'/>
    </method>

    <method name='pop_group'>
      <result type='cairo::pattern::Pattern'/>
    </method>

    <method name='pop_group_to_source'/>

    <method name='get_group_target'>
      <result type='cairo::surface::Surface' owned='false'/>
    </method>

    <method name='set_source_rgb'>
      <arg name='red' type='c:f64'/>
      <arg name='green' type='c:f64'/>
      <arg name='blue' type='c:f64'/>
    </method>

    <method name='set_source_rgba'>
      <arg name='red' type='c:f64'/>
      <arg name='green' type='c:f64'/>
      <arg name='blue' type='c:f64'/>
      <arg name='alpha' type='c:f64'/>
    </method>

    <method name='set_source'>
      <arg name='source' type='cairo::pattern::Pattern'/>
    </method>

    <method name='set_source_surface'>
      <arg name='surface' type='cairo::surface::Surface'/>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
    </method>

    <method name='get_source'>
      <result type='cairo::pattern::Pattern'/>
    </method>

    <method name='set_antialias'>
      <arg name='antialias' type='cairo::Antialias'/>
    </method>

    <method name='get_antialias'>
      <result type='cairo::Antialias'/>
    </method>

    <method name='set_dash'>
      <arg name='dashes' type='rsi:vec' element='c:f64' immutable='true'/>
      <arg name='dashes' type='rsi:vec-length' element='c:int'/>
      <arg name='offset' type='c:f64'/>
    </method>

    <method name='get_dash_count'>
      <result type='c:int'/>
    </method>

    <method name='get_dash'>
      <out name='dashes' type='rsi:vec' element='c:f64' length='get_dash_count'/>
      <out name='offset' type='c:f64'/>
    </method>

    <method name='set_fill_rule'>
      <arg name='fill_rule' type='cairo::FillRule'/>
    </method>

    <method name='get_fill_rule'>
      <result type='cairo::FillRule'/>
    </method>

    <method name='set_line_cap'>
      <arg name='line_cap' type='cairo::LineCap'/>
    </method>

    <method name='get_line_cap'>
      <result type='cairo::LineCap'/>
    </method>

    <method name='set_line_join'>
      <arg name='line_join' type='cairo::LineJoin'/>
    </method>

    <method name='get_line_join'>
      <result type='cairo::LineJoin'/>
    </method>

    <method name='set_line_width'>
      <arg name='width' type='c:f64'/>
    </method>

    <method name='get_line_width'>
      <result type='c:f64'/>
    </method>

    <method name='set_miter_limit'>
      <arg name='limit' type='c:f64'/>
    </method>

    <method name='get_miter_limit'>
      <result type='c:f64'/>
    </method>

    <method name='set_operator'>
      <arg name='operator' type='cairo::Operator'/>
    </method>

    <method name='get_operator'>
      <result type='cairo::Operator'/>
    </method>

    <method name='set_tolerance'>
      <arg name='tolerance' type='c:f64'/>
    </method>

    <method name='get_tolerance'>
      <result type='c:f64'/>
    </method>

    <method name='clip'/>
    <method name='clip_preserve'/>

    <method name='clip_extents'>
      <out name='x1' type='c:f64'/>
      <out name='y1' type='c:f64'/>
      <out name='x2' type='c:f64'/>
      <out name='y2' type='c:f64'/>
    </method>

    <method name='in_clip'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
      <result type='cairo:bool'/>
    </method>

    <method name='reset_clip'/>
    <method name='fill'/>
    <method name='fill_preserve'/>

    <method name='fill_extents'>
      <out name='x1' type='c:f64'/>
      <out name='y1' type='c:f64'/>
      <out name='x2' type='c:f64'/>
      <out name='y2' type='c:f64'/>
    </method>

    <method name='in_fill'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
      <result type='cairo:bool'/>
    </method>

    <method name='mask'>
      <arg name='pattern' type='cairo::pattern::Pattern'/>
    </method>

    <method name='mask_surface'>
      <arg name='surface' type='cairo::surface::Surface'/>
      <arg name='surface_x' type='c:f64'/>
      <arg name='surface_y' type='c:f64'/>
    </method>

    <method name='paint'/>

    <method name='paint_with_alpha'>
      <arg name='alpha' type='c:f64'/>
    </method>

    <method name='stroke'/>
    <method name='stroke_preserve'/>

    <method name='stroke_extents'>
      <out name='x1' type='c:f64'/>
      <out name='y1' type='c:f64'/>
      <out name='x2' type='c:f64'/>
      <out name='y2' type='c:f64'/>
    </method>

    <method name='in_stroke'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
      <result type='cairo:bool'/>
    </method>

    <method name='copy_page'/>

    <method name='show_page'/>

    <method name='get_reference_count'>
      <result type='c:uint'/>
    </method>

    <!-- TODO: cairo_set_user_data -->
    <!-- TODO: cairo_get_user_data -->

    <!-- Paths -->

    <method name='copy_path'>
      <result type='cairo::path::Path'/>
    </method>

    <method name='copy_path_flat'>
      <result type='cairo::path::Path'/>
    </method>

    <method name='append_path'>
      <arg name='path' type='cairo::path::Path' immutable='true'/>
    </method>

    <method name='has_current_point'>
      <result type='cairo:bool'/>
    </method>

    <method name='get_current_point'>
      <out name='x' type='c:f64'/>
      <out name='y' type='c:f64'/>
    </method>

    <method name='new_path'/>
    <method name='new_sub_path'/>
    <method name='close_path'/>

    <method name='arc'>
      <arg name='xc' type='c:f64'/>
      <arg name='yc' type='c:f64'/>
      <arg name='radius' type='c:f64'/>
      <arg name='angle1' type='c:f64'/>
      <arg name='angle2' type='c:f64'/>
    </method>

    <method name='arc_negative'>
      <arg name='xc' type='c:f64'/>
      <arg name='yc' type='c:f64'/>
      <arg name='radius' type='c:f64'/>
      <arg name='angle1' type='c:f64'/>
      <arg name='angle2' type='c:f64'/>
    </method>

    <method name='curve_to'>
      <arg name='x1' type='c:f64'/>
      <arg name='y1' type='c:f64'/>
      <arg name='x2' type='c:f64'/>
      <arg name='y2' type='c:f64'/>
      <arg name='x3' type='c:f64'/>
      <arg name='y3' type='c:f64'/>
    </method>

    <method name='line_to'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
    </method>

    <method name='move_to'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
    </method>

    <method name='rectangle'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
      <arg name='width' type='c:f64'/>
      <arg name='height' type='c:f64'/>
    </method>

    <method name='glyph_path'>
      <arg name='glyphs' type='rsi:vec' element='cairo::font::Glyph' immutable='true'/>
      <arg name='glyphs' type='rsi:vec-length' element='c:int'/>
    </method>

    <method name='text_path'>
      <arg name='text_path' type='c:string' immutable='true'/>
    </method>

    <method name='rel_curve_to'>
      <arg name='dx1' type='c:f64'/>
      <arg name='dy1' type='c:f64'/>
      <arg name='dx2' type='c:f64'/>
      <arg name='dy2' type='c:f64'/>
      <arg name='dx3' type='c:f64'/>
      <arg name='dy3' type='c:f64'/>
    </method>

    <method name='rel_line_to'>
      <arg name='dx' type='c:f64'/>
      <arg name='dy' type='c:f64'/>
    </method>

    <method name='rel_move_to'>
      <arg name='dx' type='c:f64'/>
      <arg name='dy' type='c:f64'/>
    </method>

    <method name='path_extents'>
      <out name='x1' type='c:f64'/>
      <out name='y1' type='c:f64'/>
      <out name='x2' type='c:f64'/>
      <out name='y2' type='c:f64'/>
    </method>

    <!-- Transformations -->

    <method name='translate'>
      <arg name='tx' type='c:f64'/>
      <arg name='ty' type='c:f64'/>
    </method>

    <method name='scale'>
      <arg name='sx' type='c:f64'/>
      <arg name='sy' type='c:f64'/>
    </method>

    <method name='rotate'>
      <arg name='angle' type='c:f64'/>
    </method>

    <method name='transform'>
      <arg name='matrix' type='cairo::matrix::Matrix' pass_by='ref' immutable='true'/>
    </method>

    <method name='set_matrix'>
      <arg name='matrix' type='cairo::matrix::Matrix' pass_by='ref' immutable='true'/>
    </method>

    <method name='get_matrix'>
      <out name='matrix' type='cairo::matrix::Matrix'/>
    </method>

    <method name='identity_matrix'/>

    <method name='user_to_device'>
      <inout name='x' type='c:f64'/>
      <inout name='y' type='c:f64'/>
    </method>

    <method name='user_to_device_distance'>
      <inout name='dx' type='c:f64'/>
      <inout name='dy' type='c:f64'/>
    </method>

    <method name='device_to_user'>
      <inout name='x' type='c:f64'/>
      <inout name='y' type='c:f64'/>
    </method>

    <method name='device_to_user_distance'>
      <inout name='dx' type='c:f64'/>
      <inout name='dy' type='c:f64'/>
    </method>

    <!-- Text -->

    <method name='select_font_face'>
      <arg name='family' type='c:string' immutable='true'/>
      <arg name='slant' type='cairo::font::Slant'/>
      <arg name='weight' type='cairo::font::Weight'/>
    </method>

    <method name='set_font_size'>
      <arg name='size' type='c:f64'/>
    </method>

    <method name='set_font_matrix'>
      <arg name='matrix' type='cairo::matrix::Matrix' immutable='true'/>
    </method>

    <method name='get_font_matrix'>
      <out name='matrix' type='cairo::matrix::Matrix'/>
    </method>

    <method name='set_font_options'>
      <arg name='options' type='cairo::font::Options'/>
    </method>

    <method name='get_font_options'>
      <arg name='options' type='cairo::font::Options'/>
    </method>

    <method name='set_font_face'>
      <arg name='font_face' type='cairo::font::FontFace'/>
    </method>

    <method name='get_font_face'>
      <result type='cairo::font::FontFace'/>
    </method>

    <method name='set_scaled_font'>
      <arg name='scaled_font' type='cairo::font::ScaledFont'/>
    </method>

    <method name='get_scaled_font'>
      <result type='cairo::font::ScaledFont'/>
    </method>

    <method name='show_text'>
      <arg name='utf8' type='c:string' immutable='true'/>
    </method>

    <method name='show_glyphs'>
      <arg name='glyphs' type='rsi:vec' element='cairo::font::Glyph' immutable='true'/>
      <arg name='glyphs' type='rsi:vec-length' element='c:int'/>
    </method>

    <method name='show_text_glyphs'>
      <arg name='utf8' type='c:string' immutable='true'/>
      <constant name='utf8_len' type='c:int' value='-1'/>
      <arg name='glyphs' type='rsi:vec' element='cairo::font::Glyph'/>
      <arg name='glyphs' type='rsi:vec-length' element='c:int'/>
      <arg name='clusters' type='rsi:vec' element='cairo::font::Cluster'/>
      <arg name='clusters' type='rsi:vec-length' element='c:int'/>
      <arg name='cluster_flags' type='cairo::font::ClusterFlags'/>
    </method>

    <method name='font_extents'>
      <out name='extents' type='cairo::font::FontExtents'/>
    </method>

    <method name='text_extents'>
      <arg name='utf8' type='c:string' immutable='true'/>
      <out name='extents' type='cairo::font::TextExtents'/>
    </method>

    <method name='glyph_extents'>
      <arg name='glyphs' type='rsi:vec' element='cairo::font::Glyph' immutable='true'/>
      <arg name='glyphs' type='rsi:vec-length' element='c:int'/>
      <out name='extents' type='cairo::font::TextExtents'/>
    </method>

    <implementation trait='std::clone::Clone'>
      <method name='clone' foreign='cairo_reference' immutable='true'>
        <result type='cairo::Cairo'/>
      </method>
    </implementation>

    <implementation trait='std::ops::Drop'>
      <method name='drop' foreign='cairo_destroy'/>
    </implementation>
  </struct>

  <enum name='Antialias' wrap='true'>
    <value name='Default'/>
    <value name='None'/>
    <value name='Gray'/>
    <value name='Subpixel'/>
    <value name='Fast'/>
    <value name='Good'/>
    <value name='Best'/>
  </enum>

  <enum name='FillRule' wrap='true'>
    <value name='Winding'/>
    <value name='EvenOdd'/>
  </enum>

  <enum name='LineCap' wrap='true'>
    <value name='Butt'/>
    <value name='Round'/>
    <value name='Square'/>
  </enum>

  <enum name='LineJoin' wrap='true'>
    <value name='Miter'/>
    <value name='Round'/>
    <value name='Bevel'/>
  </enum>

  <enum name='Operator' wrap='true'>
    <value name='Clear'/>

    <value name='Source'/>
    <value name='Over'/>
    <value name='In'/>
    <value name='Out'/>
    <value name='Atop'/>

    <value name='Dest'/>
    <value name='DestOver'/>
    <value name='DestIn'/>
    <value name='DestOut'/>
    <value name='DestAtop'/>

    <value name='Xor'/>
    <value name='Add'/>
    <value name='Saturate'/>

    <value name='Multiply'/>
    <value name='Screen'/>
    <value name='Overlay'/>
    <value name='Darken'/>
    <value name='Lighten'/>
    <value name='ColorDodge'/>
    <value name='ColorBurn'/>
    <value name='HardLight'/>
    <value name='SoftLight'/>
    <value name='Difference'/>
    <value name='Exclusion'/>
    <value name='HSLHue'/>
    <value name='HSLSaturation'/>
    <value name='HSLColor'/>
    <value name='HSLLuminosity'/>
  </enum>

  <mod file='cairo/path.xml'/>
  <mod file='cairo/pattern.xml'/>
  <mod file='cairo/region.xml'/>
  <mod file='cairo/font.xml'/>

  <!-- Raster Sources -->

  <mod file='cairo/device.xml'/>
  <mod file='cairo/surface.xml'/>
  <mod file='cairo/matrix.xml'/>
</rsi>