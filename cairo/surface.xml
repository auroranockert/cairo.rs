<mod name='surface'>
  <enum name='SVGVersion'>
    <value name='SVGVersion_1_1'/>
    <value name='SVGVersion_1_2'/>
  </enum>

  <struct name='Surface' opaque='true' prefix='cairo_surface_'>
    <!-- TODO: cairo_surface_create_similar -->

    <constructor name='create_similar_image'>
      <arg name='format' type='cairo::surface::Format'/>
      <arg name='width' type='c:int'/>
      <arg name='height' type='c:int'/>
    </constructor>

    <constructor name='create_for_rectangle'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
      <arg name='width' type='c:f64'/>
      <arg name='height' type='c:f64'/>
    </constructor>

    <method name='status'>
      <result type='cairo::Status'/>
    </method>

    <method name='finish'/>
    <method name='flush'/>

    <method name='get_device'>
      <result type='cairo::device::Device' transformer='clone'/>
    </method>

    <method name='get_font_options'>
      <arg name='options' type='cairo::font::Options'/>
    </method>

    <method name='get_content'>
      <result type='cairo::surface::Content'/>
    </method>

    <method name='mark_dirty'/>

    <method name='mark_dirty_rectangle'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
      <arg name='width' type='c:f64'/>
      <arg name='height' type='c:f64'/>
    </method>

    <method name='set_device_offset'>
      <arg name='x_offset' type='c:f64'/>
      <arg name='y_offset' type='c:f64'/>
    </method>

    <method name='get_device_offset'>
      <out name='x_offset' type='c:f64'/>
      <out name='y_offset' type='c:f64'/>
    </method>

    <method name='set_fallback_resolution'>
      <arg name='x_pixels_per_inch' type='c:f64'/>
      <arg name='y_pixels_per_inch' type='c:f64'/>
    </method>

    <method name='get_fallback_resolution'>
      <out name='x_pixels_per_inch' type='c:f64'/>
      <out name='y_pixels_per_inch' type='c:f64'/>
    </method>

    <method name='get_type'>
      <result type='cairo::surface::SurfaceType'/>
    </method>

    <method name='get_reference_count'>
      <result type='c:uint'/>
    </method>

    <!-- TODO: cairo_surface_set_user_data -->
    <!-- TODO: cairo_surface_get_user_data -->

    <method name='copy_page'/>
    <method name='show_page'/>

    <!-- TODO: cairo_surface_has_show_text_glyphs -->
    <!-- TODO: cairo_surface_set_mime_data -->
    <!-- TODO: cairo_surface_get_mime_data -->
    <!-- TODO: cairo_surface_supports_mime_type -->
    <!-- TODO: cairo_surface_map_to_image -->
    <!-- TODO: cairo_surface_unmap_image -->

    <!-- Image Surface -->

    <!-- TODO: cairo_format_stride_for_width -->

    <constructor name='create_image' foreign='cairo_image_surface_create'>
      <arg name='format' type='cairo::surface::Format'/>
      <arg name='width' type='c:int'/>
      <arg name='height' type='c:int'/>
    </constructor>

    <!-- TODO: cairo_image_surface_create_for_data -->
    <!-- TODO: cairo_image_surface_get_data -->

    <method name='get_format' foreign='cairo_image_surface_get_format'>
      <result type='cairo::surface::Format'/>
    </method>

    <method name='get_width' foreign='cairo_image_surface_get_width'>
      <result type='c:int'/>
    </method>

    <method name='get_height' foreign='cairo_image_surface_get_height'>
      <result type='c:int'/>
    </method>

    <method name='get_stride' foreign='cairo_image_surface_get_stride'>
      <result type='c:int'/>
    </method>

    <!-- PDF Surface -->
    <!-- TODO: All missing -->

    <!-- PNG Surface -->

    <constructor name='create_from_png' foreign='cairo_image_surface_create_from_png'>
      <arg name='filename' type='c:string' immutable='true'/>
    </constructor>

    <!-- TODO: cairo_image_surface_create_from_png_stream -->

    <method name='write_to_png'>
      <arg name='filename' type='c:string' immutable='true'/>
      <result type='cairo::Status'/>
    </method>

    <!-- TODO: cairo_surface_write_to_png_stream -->

    <!-- PostScript Surface -->
    <!-- TODO: All missing -->

    <!-- Recording Surface -->
    <!-- TODO: All missing -->

    <!-- Win32 Surface -->
    <!-- TODO: All missing -->

    <!-- SVG Surface -->
    <method name='create_svg' foreign='cairo_svg_surface_create'>
      <arg name='filename' type='c:string' immutable='true'/>
      <arg name='width' type='c:f64'/>
      <arg name='height' type='c:f64'/>
    </method>

    <!-- TODO: cairo_svg_surface_create_for_stream -->

    <method name='restrict_to_svg_version' foreign='cairo_svg_surface_restrict_to_version'>
      <arg name='version' type='cairo::surface::SVGVersion'/>
    </method>

    <!-- TODO: cairo_svg_get_versions -->

    <fn name='svg_version_to_string' foreign='cairo_svg_version_to_string'>
      <arg name='version' type='cairo::surface::SVGVersion'/>
      <result type='c:string' immutable='true'/>
    </fn>

    <!-- Quartz Surface -->
    <!-- TODO: All missing -->

    <!-- XCB Surface -->
    <!-- TODO: All missing -->

    <!-- XLib Surface -->
    <!-- TODO: All missing -->

    <!-- XLib-XRender Surface -->
    <!-- TODO: All missing -->

    <!-- Script Surface -->
    <!-- TODO: All missing -->

    <implementation trait='std::clone::Clone'>
      <method name='clone' foreign='cairo_surface_reference' immutable='true'>
        <result type='cairo::surface::Surface'/>
      </method>
    </implementation>

    <implementation trait='std::ops::Drop'>
      <method name='drop' foreign='cairo_surface_destroy'/>
    </implementation>
  </struct>

  <enum name='Content' wrap='true'>
    <value name='Color' value='0x1000'/>
    <value name='Alpha' value='0x2000'/>
    <value name='ColorAlpha' value='0x3000'/>
  </enum>

  <enum name='SurfaceType' wrap='true'>
    <value name='Image'/>
    <value name='PDF'/>
    <value name='PS'/>
    <value name='XLib'/>
    <value name='XCB'/>
    <value name='Glitz'/>
    <value name='Quartz'/>
    <value name='Win32'/>
    <value name='BeOS'/>
    <value name='DirectFB'/>
    <value name='SVG'/>
    <value name='OS2'/>
    <value name='Win32Printing'/>
    <value name='QuartzImage'/>
    <value name='Script'/>
    <value name='Qt'/>
    <value name='Recording'/>
    <value name='VG'/>
    <value name='GL'/>
    <value name='DRM'/>
    <value name='Tee'/>
    <value name='XML'/>
    <value name='Skia'/>
    <value name='Subsurface'/>
    <value name='CoGL'/>
  </enum>

  <enum name='Format' wrap='true'>
    <value name='Invalid' value='-1'/>
    <value name='ARGB32'/>
    <value name='RGB24'/>
    <value name='A8'/>
    <value name='A1'/>
    <value name='RGB16_565'/>
    <value name='RGB30'/>
  </enum>
</mod>