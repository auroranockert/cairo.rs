<mod name='pattern'>
  <struct name='Pattern' opaque='true' prefix='cairo_pattern_'>
    <!-- Gradients -->
    <method name='add_color_stop_rgb'>
      <arg name='offset' type='c:f64'/>
      <arg name='red' type='c:f64'/>
      <arg name='green' type='c:f64'/>
      <arg name='blue' type='c:f64'/>
    </method>

    <method name='add_color_stop_rgba'>
      <arg name='offset' type='c:f64'/>
      <arg name='red' type='c:f64'/>
      <arg name='green' type='c:f64'/>
      <arg name='blue' type='c:f64'/>
      <arg name='alpha' type='c:f64'/>
    </method>

    <method name='get_color_stop_count'>
      <result type='cairo::Status'/>
      <out name='stop_count' type='c:int'/>
    </method>

    <method name='get_color_stop_rgba'>
      <arg name='stop_count' type='c:int'/>
      <result type='cairo::Status'/>
      <out name='offset' type='c:f64'/>
      <out name='red' type='c:f64'/>
      <out name='green' type='c:f64'/>
      <out name='blue' type='c:f64'/>
      <out name='alpha' type='c:f64'/>
    </method>

    <!-- Opaque -->
    <constructor name='create_rgb'>
      <arg name='red' type='c:f64'/>
      <arg name='green' type='c:f64'/>
      <arg name='blue' type='c:f64'/>
    </constructor>

    <constructor name='create_rgba'>
      <arg name='red' type='c:f64'/>
      <arg name='green' type='c:f64'/>
      <arg name='blue' type='c:f64'/>
      <arg name='alpha' type='c:f64'/>
    </constructor>

    <method name='get_rgba'>
      <result type='cairo::Status'/>
      <out name='red' type='c:f64'/>
      <out name='green' type='c:f64'/>
      <out name='blue' type='c:f64'/>
      <out name='alpha' type='c:f64'/>
    </method>

    <!-- Surface -->
    <constructor name='create_for_surface'>
      <arg name='surface' type='cairo::surface::Surface'/>
    </constructor>

    <method name='get_surface'>
      <result type='cairo::Status'/>
      <out name='surface' type='cairo::surface::Surface' owned='false'/>
    </method>

    <!-- Linear -->
    <constructor name='create_linear'>
      <arg name='x0' type='c:f64'/>
      <arg name='y0' type='c:f64'/>
      <arg name='x1' type='c:f64'/>
      <arg name='y1' type='c:f64'/>
    </constructor>

    <method name='get_linear_points'>
      <result type='cairo::Status'/>
      <out name='x0' type='c:f64'/>
      <out name='y0' type='c:f64'/>
      <out name='x1' type='c:f64'/>
      <out name='y1' type='c:f64'/>
    </method>

    <!-- Radial -->
    <constructor name='create_radial'>
      <arg name='cx0' type='c:f64'/>
      <arg name='cy0' type='c:f64'/>
      <arg name='radius0' type='c:f64'/>
      <arg name='cx1' type='c:f64'/>
      <arg name='cy1' type='c:f64'/>
      <arg name='radius1' type='c:f64'/>
    </constructor>

    <method name='get_radial_circles'>
      <result type='cairo::Status'/>
      <out name='x0' type='c:f64'/>
      <out name='y0' type='c:f64'/>
      <out name='r0' type='c:f64'/>
      <out name='x1' type='c:f64'/>
      <out name='y1' type='c:f64'/>
      <out name='r1' type='c:f64'/>
    </method>

    <!-- Mesh -->
    <constructor name='create_mesh'/>

    <method name='begin_patch' foreign='cairo_mesh_pattern_begin_patch'/>
    <method name='end_patch' foreign='cairo_mesh_pattern_end_patch'/>

    <method name='move_to' foreign='cairo_mesh_pattern_move_to'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
    </method>

    <method name='line_to' foreign='cairo_mesh_pattern_line_to'>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
    </method>

    <method name='curve_to' foreign='cairo_mesh_pattern_curve_to'>
      <arg name='x1' type='c:f64'/>
      <arg name='y1' type='c:f64'/>
      <arg name='x2' type='c:f64'/>
      <arg name='y2' type='c:f64'/>
      <arg name='x3' type='c:f64'/>
      <arg name='y3' type='c:f64'/>
    </method>

    <method name='set_control_point' foreign='cairo_mesh_pattern_set_control_point'>
      <arg name='point_num' type='c:uint'/>
      <arg name='x' type='c:f64'/>
      <arg name='y' type='c:f64'/>
    </method>

    <method name='set_corner_color_rgb' foreign='cairo_mesh_pattern_set_corner_color_rgb'>
      <arg name='corner_num' type='c:uint'/>
      <arg name='red' type='c:f64'/>
      <arg name='green' type='c:f64'/>
      <arg name='blue' type='c:f64'/>
    </method>

    <method name='set_corner_color_rgba' foreign='cairo_mesh_pattern_set_corner_color_rgba'>
      <arg name='corner_num' type='c:uint'/>
      <arg name='red' type='c:f64'/>
      <arg name='green' type='c:f64'/>
      <arg name='blue' type='c:f64'/>
      <arg name='alpha' type='c:f64'/>
    </method>

    <method name='get_patch_count' foreign='cairo_mesh_pattern_get_patch_count'>
      <result type='cairo::Status'/>
      <out name='count' type='c:uint'/>
    </method>

    <method name='get_path' foreign='cairo_mesh_pattern_get_path'>
      <arg name='patch_num' type='c:uint'/>
      <result type='cairo::path::Path'/>
    </method>

    <method name='get_control_point' foreign='cairo_mesh_pattern_get_control_point'>
      <arg name='patch_num' type='c:uint'/>
      <arg name='pointer_num' type='c:uint'/>
      <result type='cairo::Status'/>
      <out name='x' type='c:f64'/>
      <out name='y' type='c:f64'/>
    </method>

    <method name='get_corner_color_rgba' foreign='cairo_mesh_pattern_get_corner_color_rgba'>
      <arg name='patch_num' type='c:uint'/>
      <arg name='pointer_num' type='c:uint'/>
      <result type='cairo::Status'/>
      <out name='red' type='c:f64'/>
      <out name='green' type='c:f64'/>
      <out name='blue' type='c:f64'/>
      <out name='alpha' type='c:f64'/>
    </method>

    <!-- Common -->
    <method name='status'>
      <result type='cairo::Status'/>
    </method>

    <method name='set_extend'>
      <arg name='extend' type='cairo::pattern::Extend'/>
    </method>

    <method name='get_extend'>
      <result type='cairo::pattern::Extend'/>
    </method>

    <method name='set_filter'>
      <arg name='filter' type='cairo::pattern::Filter'/>
    </method>

    <method name='get_filter'>
      <result type='cairo::pattern::Filter'/>
    </method>

    <method name='set_matrix'>
      <arg name='matrix' type='cairo::matrix::Matrix'/>
    </method>

    <method name='get_matrix'>
      <out name='matrix' type='cairo::matrix::Matrix'/>
    </method>

    <method name='get_type'>
      <result type='cairo::pattern::PatternType'/>
    </method>

    <method name='get_reference_count'>
      <result type='c:uint'/>
    </method>

    <!-- TODO: cairo_pattern_set_user_data -->
    <!-- TODO: cairo_pattern_get_user_data -->
    
    <implementation trait='std::clone::Clone'>
      <method name='clone' foreign='cairo_pattern_reference' immutable='true'>
        <result type='cairo::pattern::Pattern'/>
      </method>
    </implementation>

    <implementation trait='std::ops::Drop' for='Pattern'>
      <method name='drop' foreign='cairo_pattern_destroy'/>
    </implementation>
  </struct>

  <enum name='Extend' wrap='true'>
    <value name='None'/>
    <value name='Repeat'/>
    <value name='Reflect'/>
    <value name='Pad'/>
  </enum>

  <enum name='Filter' wrap='true'>
    <value name='Fast'/>
    <value name='Good'/>
    <value name='Best'/>
    <value name='Nearest'/>
    <value name='Bilinear'/>
    <value name='Gaussian'/>
  </enum>

  <enum name='PatternType' wrap='true'>
    <value name='Solid'/>
    <value name='Surface'/>
    <value name='Linear'/>
    <value name='Radial'/>
    <value name='Mesh'/>
    <value name='RasterSource'/>
  </enum>
</mod>