<module name='pattern'>
  <struct name='Pattern' opaque='true'/>

  <module name='extend'>
    <enum name='Extend'>
      <value name='None'/>
      <value name='Repeat'/>
      <value name='Reflect'/>
    </enum>
  </module>

  <module name='filter'>
    <enum name='Filter'>
      <value name='Fast'/>
      <value name='Good'/>
      <value name='Best'/>
      <value name='Nearest'/>
      <value name='Bilinear'/>
      <value name='Gaussian'/>
    </enum>
  </module>

  <module name='pattern_type'>
    <enum name='PatternType'>
      <value name='Solid'/>
      <value name='Surface'/>
      <value name='Linear'/>
      <value name='Radial'/>
      <value name='Mesh'/>
      <value name='RasterSource'/>
    </enum>
  </module>

  <implementation for='Pattern' prefix='cairo_pattern_'>
    <!-- Gradients -->
    <fn name='add_color_stop_rgb'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='offset' type='double'/>
      <argument name='red' type='double'/>
      <argument name='green' type='double'/>
      <argument name='blue' type='double'/>
    </fn>

    <fn name='add_color_stop_rgba'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='offset' type='double'/>
      <argument name='red' type='double'/>
      <argument name='green' type='double'/>
      <argument name='blue' type='double'/>
      <argument name='alpha' type='double'/>
    </fn>

    <fn name='get_color_stop_count'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='stop_count' type='int' pass_by='mut-ref' transformer='zero'/>
      <result type='[super::Status]'/>
      <result name='stop_count' type='int' transformer='out'/>
    </fn>

    <fn name='get_color_stop_rgba'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='stop_count' type='int'/>
      <argument name='offset' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='red' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='green' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='blue' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='alpha' type='double' pass_by='mut-ref' transformer='zero'/>
      <result type='[super::Status]'/>
      <result name='offset' type='double' transformer='out'/>
      <result name='red' type='double' transformer='out'/>
      <result name='green' type='double' transformer='out'/>
      <result name='blue' type='double' transformer='out'/>
      <result name='alpha' type='double' transformer='out'/>
    </fn>

    <!-- Opaque -->
    <fn name='rgb' foreign='cairo_pattern_create_rgb'>
      <argument name='red' type='double'/>
      <argument name='green' type='double'/>
      <argument name='blue' type='double'/>
      <result type='{Pattern}'/>
    </fn>

    <fn name='rgba' foreign='cairo_pattern_create_rgba'>
      <argument name='red' type='double'/>
      <argument name='green' type='double'/>
      <argument name='blue' type='double'/>
      <argument name='alpha' type='double'/>
      <result type='{Pattern}'/>
    </fn>

    <fn name='get_rgba'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='red' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='green' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='blue' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='alpha' type='double' pass_by='mut-ref' transformer='zero'/>
      <result type='[super::Status]'/>
      <result name='red' type='double' transformer='out'/>
      <result name='green' type='double' transformer='out'/>
      <result name='blue' type='double' transformer='out'/>
      <result name='alpha' type='double' transformer='out'/>
    </fn>

    <!-- Surface -->
    <fn name='for_surface' foreign='cairo_pattern_create_for_surface'>
      <argument name='surface' type='{super::surface::Surface}'/>
      <result type='{Pattern}'/>
    </fn>

    <fn name='get_surface'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='surface' type='[super::surface::Surface]' pass_by='mut-ref' transformer='zero'/>
      <result type='[super::Status]'/>
      <result name='surface' type='[super::surface::Surface]' transformer='out'/>
    </fn>

    <!-- Linear -->
    <fn name='linear' foreign='cairo_pattern_create_linear'>
      <argument name='x0' type='double'/>
      <argument name='y0' type='double'/>
      <argument name='x1' type='double'/>
      <argument name='y1' type='double'/>
      <result type='{Pattern}'/>
    </fn>

    <fn name='get_linear_points'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x0' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y0' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='x1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y1' type='double' pass_by='mut-ref' transformer='zero'/>
      <result type='[super::Status]'/>
      <result name='x0' type='double' transformer='out'/>
      <result name='y0' type='double' transformer='out'/>
      <result name='x1' type='double' transformer='out'/>
      <result name='y1' type='double' transformer='out'/>
    </fn>

    <!-- Radial -->
    <fn name='radial' foreign='cairo_pattern_create_radial'>
      <argument name='cx0' type='double'/>
      <argument name='cy0' type='double'/>
      <argument name='radius0' type='double'/>
      <argument name='cx1' type='double'/>
      <argument name='cy1' type='double'/>
      <argument name='radius1' type='double'/>
      <result type='{Pattern}'/>
    </fn>

    <fn name='get_radial_circles'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x0' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y0' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='r0' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='x1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y1' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='r1' type='double' pass_by='mut-ref' transformer='zero'/>
      <result type='[super::Status]'/>
      <result name='x0' type='double' transformer='out'/>
      <result name='y0' type='double' transformer='out'/>
      <result name='r0' type='double' transformer='out'/>
      <result name='x1' type='double' transformer='out'/>
      <result name='y1' type='double' transformer='out'/>
      <result name='r1' type='double' transformer='out'/>
    </fn>

    <!-- Mesh -->
    <fn name='mesh' foreign='cairo_pattern_create_mesh'>
      <result type='{Pattern}'/>
    </fn>

    <fn name='begin_patch' foreign='cairo_mesh_pattern_begin_patch'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </fn>

    <fn name='end_patch' foreign='cairo_mesh_pattern_end_patch'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </fn>

    <fn name='move_to' foreign='cairo_mesh_pattern_move_to'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
    </fn>

    <fn name='line_to' foreign='cairo_mesh_pattern_line_to'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
    </fn>

    <fn name='curve_to' foreign='cairo_mesh_pattern_curve_to'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='x1' type='double'/>
      <argument name='y1' type='double'/>
      <argument name='x2' type='double'/>
      <argument name='y2' type='double'/>
      <argument name='x3' type='double'/>
      <argument name='y3' type='double'/>
    </fn>

    <fn name='set_control_point' foreign='cairo_mesh_pattern_set_control_point'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='point_num' type='unsigned int'/>
      <argument name='x' type='double'/>
      <argument name='y' type='double'/>
    </fn>

    <fn name='set_corner_color_rgb' foreign='cairo_mesh_pattern_set_corner_color_rgb'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='corner_num' type='unsigned int'/>
      <argument name='red' type='double'/>
      <argument name='green' type='double'/>
      <argument name='blue' type='double'/>
    </fn>

    <fn name='set_corner_color_rgba' foreign='cairo_mesh_pattern_set_corner_color_rgba'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='corner_num' type='unsigned int'/>
      <argument name='red' type='double'/>
      <argument name='green' type='double'/>
      <argument name='blue' type='double'/>
      <argument name='alpha' type='double'/>
    </fn>

    <fn name='get_patch_count' foreign='cairo_mesh_pattern_get_patch_count'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='count' type='unsigned int' pass_by='mut-ref' transformer='zero'/>
      <result type='[super::Status]'/>
      <result name='count' type='unsigned int' transformer='out'/>
    </fn>

    <fn name='get_path' foreign='cairo_mesh_pattern_get_path'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='patch_num' type='unsigned int'/>
      <result type='{super::path::Path}'/>
    </fn>

    <fn name='get_control_point' foreign='cairo_mesh_pattern_get_control_point'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='patch_num' type='unsigned int'/>
      <argument name='pointer_num' type='unsigned int'/>
      <argument name='x' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='y' type='double' pass_by='mut-ref' transformer='zero'/>
      <result type='[super::Status]'/>
      <result name='x' type='double' transformer='out'/>
      <result name='y' type='double' transformer='out'/>
    </fn>

    <fn name='get_corner_color_rgba' foreign='cairo_mesh_pattern_get_corner_color_rgba'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='patch_num' type='unsigned int'/>
      <argument name='pointer_num' type='unsigned int'/>
      <argument name='red' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='green' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='blue' type='double' pass_by='mut-ref' transformer='zero'/>
      <argument name='alpha' type='double' pass_by='mut-ref' transformer='zero'/>
      <result type='[super::Status]'/>
      <result name='red' type='double' transformer='out'/>
      <result name='green' type='double' transformer='out'/>
      <result name='blue' type='double' transformer='out'/>
      <result name='alpha' type='double' transformer='out'/>
    </fn>

    <!-- Common -->
    <fn name='status'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[super::Status]'/>
    </fn>

    <fn name='set_extend'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='extend' type='[extend::Extend]'/>
    </fn>

    <fn name='get_extend'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[extend::Extend]'/>
    </fn>

    <fn name='set_filter'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='filter' type='[filter::Filter]'/>
    </fn>

    <fn name='get_filter'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[filter::Filter]'/>
    </fn>

    <fn name='set_matrix'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='matrix' type='[super::matrix::Matrix]'/>
    </fn>

    <fn name='get_matrix'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[super::matrix::Matrix]'/>
    </fn>

    <fn name='get_type'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[pattern_type::PatternType]'/>
    </fn>

    <fn name='reference_count' foreign='cairo_pattern_get_reference_count'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='unsigned int'/>
    </fn>

    <!-- TODO: cairo_pattern_set_user_data -->
    <!-- TODO: cairo_pattern_get_user_data -->
  </implementation>

  <implementation trait='std::clone::Clone' for='Pattern'>
    <fn name='clone' foreign='cairo_pattern_reference'>
      <argument pass_by='self' transformer='opaque'/>
      <result type='{Pattern}'/>
    </fn>
  </implementation>

  <implementation trait='std::ops::Drop' for='Pattern'>
    <fn name='drop' foreign='cairo_pattern_destroy'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </fn>
  </implementation>
</module>
