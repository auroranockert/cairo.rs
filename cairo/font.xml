<module name='font'>
  <struct name='Options' opaque='true'/>
  <struct name='FontFace' opaque='true'/>
  <struct name='ScaledFont' opaque='true'/>

  <struct name='Glyph'>
    <field name='index' type='unsigned long'/>
    <field name='x' type='double'/>
    <field name='y' type='double'/>
  </struct>

  <struct name='Cluster'>
    <field name='num_bytes' type='int'/>
    <field name='num_glyphs' type='int'/>
  </struct>

  <struct name='FontExtents'>
    <field name='ascent' type='double'/>
    <field name='descent' type='double'/>
    <field name='height' type='double'/>
    <field name='max_x_advance' type='double'/>
    <field name='max_y_advance' type='double'/>
  </struct>

  <struct name='TextExtents'>
    <field name='x_bearing' type='double'/>
    <field name='y_bearing' type='double'/>
    <field name='width' type='double'/>
    <field name='height' type='double'/>
    <field name='max_x_advance' type='double'/>
    <field name='max_y_advance' type='double'/>
  </struct>

  <module name='cluster_flags'>
    <enum name='ClusterFlags'>
      <value name='Forwards'/>
      <value name='Backwards'/>
    </enum>
  </module>

  <module name='font_type'>
    <enum name='FontType'>
      <value name='Toy'/>
      <value name='FT'/>
      <value name='Win32'/>
      <value name='Quartz'/>
      <value name='User'/>
    </enum>
  </module>

  <module name='slant'>
    <enum name='Slant'>
      <value name='Normal'/>
      <value name='Italic'/>
      <value name='Oblique'/>
    </enum>
  </module>

  <module name='weight'>
    <enum name='Weight'>
      <value name='Normal'/>
      <value name='Bold'/>
    </enum>
  </module>

  <module name='subpixel_order'>
    <enum name='SubpixelOrder'>
      <value name='Default'/>
      <value name='RGB'/>
      <value name='BGR'/>
      <value name='VRGB'/>
      <value name='VBGR'/>
    </enum>
  </module>

  <module name='hint_style'>
    <enum name='HintStyle'>
      <value name='Default'/>
      <value name='None'/>
      <value name='Slight'/>
      <value name='Medium'/>
      <value name='Full'/>
    </enum>
  </module>

  <module name='hint_metrics'>
    <enum name='HintMetrics'>
      <value name='Default'/>
      <value name='Off'/>
      <value name='On'/>
    </enum>
  </module>

  <implementation for='Options' prefix='cairo_font_options_'>
    <fn name='new' foreign='cairo_font_options_create'>
      <result type='{Options}'/>
    </method>

    <fn name='status'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[super::Status]'/>
    </method>

    <fn name='merge'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='other' type='{Options}' pass_by='ref'/>
    </method>

    <fn name='hash'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='unsigned long'/>
    </method>

    <fn name='equal'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='other' type='{Options}' pass_by='ref' transformer='opaque'/>
      <result type='i32' transformer='compare' value='0'/>
    </method>

    <fn name='set_antialias'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='antialias' type='[super::antialias::Antialias]'/>
    </method>

    <fn name='get_antialias'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[super::antialias::Antialias]'/>
    </method>

    <fn name='set_subpixel_order'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='subpixel_order' type='[subpixel_order::SubpixelOrder]'/>
    </method>

    <fn name='get_subpixel_order'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[subpixel_order::SubpixelOrder]'/>
    </method>

    <fn name='set_hint_style'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='hint_style' type='[hint_style::HintStyle]'/>
    </method>

    <fn name='get_hint_style'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[hint_style::HintStyle]'/>
    </method>

    <fn name='set_hint_metrics'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <argument name='hint_metrics' type='[hint_metrics::HintMetrics]'/>
    </method>

    <fn name='get_hint_metrics'>
      <argument pass_by='mut-self' transformer='opaque'/>
      <result type='[hint_metrics::HintMetrics]'/>
    </method>
  </implementation>

  <implementation trait='std::clone::Clone' for='Options'>
    <fn name='clone' foreign='cairo_font_options_copy'>
      <argument pass_by='self' transformer='opaque'/>
      <result type='{Options}'/>
    </method>
  </implementation>

  <implementation trait='std::clone::DeepClone' for='Options'>
    <fn name='deep_clone' foreign='cairo_font_options_copy' extern='false'>
      <argument pass_by='self' transformer='opaque'/>
      <result type='{Options}'/>
    </method>
  </implementation>

  <implementation trait='std::ops::Drop' for='Options'>
    <fn name='drop' foreign='cairo_font_options_destroy'>
      <argument pass_by='mut-self' transformer='opaque'/>
    </method>
  </implementation>

  <implementation for='FontFace' prefix='cairo_font_face_'>
    <!-- Toy -->
    <fn name='toy' foreign='cairo_toy_font_face_create'>
      <argument name='family' type='string' pass_by='ref' transformer='cstring'/>
      <argument name='slant' type='[slant::Slant]'/>
      <argument name='weight' type='[weight::Weight]'/>
      <result type='{FontFace}'/>
    </method>

    <fn name='toy_get_family' foreign='cairo_toy_font_face_get_family'>
      <argument type='{FontFace}' pass_by='mut-self' transformer='opaque'/>
      <result type='{std::c_str::CString}' transformer='cstring'/>
    </method>

    <fn name='toy_get_slant' foreign='cairo_toy_font_face_get_slant'>
      <argument type='{FontFace}' pass_by='mut-self' transformer='opaque'/>
      <result type='[slant::Slant]'/>
    </method>

    <fn name='toy_get_weight' foreign='cairo_toy_font_face_get_weight'>
      <argument type='{FontFace}' pass_by='mut-self' transformer='opaque'/>
      <result type='[slant::Slant]'/>
    </method>

    <!-- Generic -->
    <fn name='status'>
      <argument type='{FontFace}' pass_by='mut-self' transformer='opaque'/>
      <result type='[super::Status]'/>
    </method>

    <fn name='get_type'>
      <argument type='{FontFace}' pass_by='mut-self' transformer='opaque'/>
      <result type='{font_type::FontType}'/>
    </method>

    <fn name='reference_count' foreign='cairo_font_face_get_reference_count'>
      <argument type='{FontFace}' pass_by='mut-self' transformer='opaque'/>
      <result type='unsigned int'/>
    </method>

    <!-- TODO: cairo_font_face_set_user_data -->
    <!-- TODO: cairo_font_face_get_user_data -->
  </implementation>

  <implementation trait='std::clone::Clone' for='FontFace'>
    <fn name='clone' foreign='cairo_font_face_reference'>
      <argument pass_by='self' transformer='opaque'/>
      <result type='{FontFace}'/>
    </method>
  </implementation>

  <implementation trait='std::ops::Drop' for='FontFace'>
    <fn name='drop' foreign='cairo_font_face_destroy'>
      <argument type='{FontFace}' pass_by='mut-self' transformer='opaque'/>
    </method>
  </implementation>

  <implementation for='ScaledFont' prefix='cairo_scaled_font_'>
    <fn name='new' foreign='cairo_scaled_font_create'>
      <argument name='font_face' type='{FontFace}' pass_by='mut-ref'/>
      <argument name='font_matrix' type='{super::matrix::Matrix}' pass_by='ref'/>
      <argument name='ctm' type='{super::matrix::Matrix}' pass_by='ref'/>
      <argument name='options' type='{Options}' pass_by='mut-ref'/>
      <result type='{ScaledFont}'/>
    </method>
    
    <fn name='status'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <result type='[super::Status]'/>
    </method>

    <fn name='font_extents' foreign='cairo_scaled_font_extents'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <argument name='extents' type='[FontExtents]' pass_by='mut-ref' transformer='zero'/>
      <result name='extents' type='[FontExtents]' transformer='out'/>
    </method>

    <fn name='text_extents'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <argument name='utf8' type='string' pass_by='ref'/>
      <argument name='extents' type='[TextExtents]' pass_by='mut-ref' transformer='zero'/>
      <result name='extents' type='[TextExtents]' transformer='out'/>
    </method>

    <fn name='glyph_extents'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <argument name='glyphs' type='vec {Glyph}' pass_by='ref' transformer='vec'/>
      <argument name='glyphs' type='int' transformer='vec-length'/>
      <argument name='extents' type='[TextExtents]' pass_by='mut-ref' transformer='zero'/>
      <result name='extents' type='[TextExtents]' transformer='out'/>
    </method>

    <!-- TODO: cairo_scaled_font_text_to_glyphs -->

    <fn name='get_font_face'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <result name='extents' type='{FontFace}'/>
    </method>

    <fn name='get_font_options'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <argument name='options' type='[FontExtents]'/>
    </method>

    <fn name='get_font_matrix'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <argument name='font_matrix' type='[super::matrix::Matrix]' pass_by='mut-ref' transformer='zero'/>
      <result name='font_matrix' type='[super::matrix::Matrix]' transformer='out'/>
    </method>

    <fn name='get_ctm'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <argument name='ctm' type='[super::matrix::Matrix]' pass_by='mut-ref' transformer='zero'/>
      <result name='ctm' type='[super::matrix::Matrix]' transformer='out'/>
    </method>

    <fn name='get_scale_matrix'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <argument name='scale_matrix' type='[super::matrix::Matrix]' pass_by='mut-ref' transformer='zero'/>
      <result name='scale_matrix' type='[super::matrix::Matrix]' transformer='out'/>
    </method>

    <fn name='get_type'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <result type='{font_type::FontType}'/>
    </method>

    <fn name='reference_count' foreign='cairo_scaled_font_get_reference_count'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
      <result type='unsigned int'/>
    </method>

    <!-- TODO: cairo_scaled_font_set_user_data -->
    <!-- TODO: cairo_scaled_font_get_user_data -->
  </implementation>

  <implementation trait='std::clone::Clone' for='ScaledFont'>
    <fn name='clone' foreign='cairo_scaled_font_reference'>
      <argument pass_by='self' transformer='opaque'/>
      <result type='{ScaledFont}'/>
    </method>
  </implementation>

  <implementation trait='std::ops::Drop' for='ScaledFont'>
    <fn name='drop' foreign='cairo_scaled_font_destroy'>
      <argument type='{ScaledFont}' pass_by='mut-self' transformer='opaque'/>
    </method>
  </implementation>
</module>